name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black bandit safety pytest pytest-cov
          
      - name: Run Black
        run: black . --check
        
      - name: Run Flake8
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        
      - name: Run Bandit
        run: bandit -r . -c pyproject.toml
        
      - name: Run Safety
        run: safety check

  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: azureshield_iam_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install pytest pytest-cov pytest-asyncio httpx
          
      - name: Run tests with coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/azureshield_iam_test
          REDIS_URL: redis://localhost:6379/0
          TESTING: "true"
        run: |
          pytest backend/tests/ --cov=backend --cov-report=xml --cov-report=term-missing
          
      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Run Snyk Security Scan
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          
      - name: Run OWASP ZAP scan
        uses: zaproxy/action-full-scan@v0.4.0
        with:
          target: http://localhost:8000
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./docker/backend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/azureshield-iam-backend:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/azureshield-iam-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./docker/frontend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/azureshield-iam-frontend:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/azureshield-iam-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  notify:
    name: Notify
    needs: [code-quality, test, security-scan, docker-build]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Send notification
        uses: actions/github-script@v6
        with:
          script: |
            const status = '${{ needs.code-quality.result }}' === 'success' && 
                         '${{ needs.test.result }}' === 'success' && 
                         '${{ needs.security-scan.result }}' === 'success' && 
                         '${{ needs.docker-build.result }}' === 'success';
            
            const message = status ? 
              '✅ All checks passed successfully!' : 
              '❌ Some checks failed. Please review the logs.';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            }); 